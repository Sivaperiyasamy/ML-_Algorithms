# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h_Fz4XiuKVWsbecJbStpoBIfZgUOasaP
"""

import pandas as pd
import numpy as np

a = np.array([1,2,3,4,5])
b = pd.Series([1,2,3,4,5])

print("np array")
print(a,type(a))
print("pd series")
print(b,type(b))

b.drop(3)

print(b.iloc[3])
print(b.loc[4])

print(b.index)

s = pd.Series([1,2,3,4,5],index=['a','b','c','d','e'])
print(s)

data = [["aaa",1,25],["bbb",2,30],["ccc",3,22],["ddd",4,26],["eee",5,21]]
df = pd.DataFrame(data)
df

data = [["aaa",1,25],["bbb",2,30],["ccc",3,22],["ddd",4,26],["eee",5,21]]
df = pd.DataFrame(data)
df[:3]

df = pd.DataFrame(data,columns = ["Name","Roll","Age"])
df

df = pd.DataFrame(data,columns = ["Name","Roll","Age"])
print(df["Name"])
print(df["Roll"])
print(df["Age"])

df.loc[0,'Name'] #access the location with column title

df.iloc[0,0] #access the location with index value2

df.plot()

df.hist(bins=2)

df.head(2)

df.head(4)

df.head(-2)

data=[["aaa",1,25],["bbb",np.nan,30],["ccc",3,22],["ddd",np.nan,26],["eee",5,21],["fff",np.nan,34],["ggg",7,45],["hhh",np.nan,65],["iii",9,75],["jjj",np.nan,23]] #use np.nan for null values
df=pd.DataFrame(data)
df=pd.DataFrame(data,columns = ["Name","Roll","Age"])
print(df)
print()
print(df.isnull())
print()
print(df.isnull().sum())
#to remove null values
print()
print(df.dropna()) #dropna will remove tha entire row of the null values
print()
#print(df.drop(['Age'],axis=1,inplace=True))
print()
print(df.drop([0,2]))

a=np.array([10,20,31,40,50,37,61,79])
a[a>40]#greater than 40
a[a%2!=0]#odd number
a[a%2==0]#even numbers

#basic pandas operations
df
df.info()
df['Name'].str.contains('e')

#basix attributes

print(df.shape)
print(df.size)
print(df.axes)
print(df.ndim)
print(df.dtypes)
print(df.index)
print(df.columns)
print(df.values)
print(df.head())
print(df.tail())
print()

#concate 2 dataframe

df2=pd.concat([df,df])
print(df2)

print(df['Age'][0])
print()
print(df.loc[0,'Name'])

print()
a=df['Age'][1]='99'
print(a)

#reading file

a=pd.read_html("https://en.wikipedia.org/wiki/Pen")
a

b=pd.read_table("https://www.iana.org/assignments/media-types/text/tab-separated-values")
b

b=pd.read_table("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/chipotle.tsv")
b

b.head(10).describe()#describe will give the mean count values etc

type(b)
type(b.item_name)

b.isnull().sum()

df.head(10).describe(include="all")

b

b.item_price=b.item_price.str.replace('$','')
b.head(10)

b.item_price=b.item_price.astype(float)
b

type(b.item_price[0])

b.item_price*100

b.item_name.unique()

b_drink=b[b.item_price<1.1]
b_drink

b_drink.item_name.unique() # this for only 10 set of datas
# use nunique for the whole dataset
b_drink.item_name.nunique()
#count the duplicate set
b_drink.item_name.value_counts()

b[b.item_name=='Chicken Bowl']

b[b.item_name=='Chicken Bowel'].choice_description.value_counts()

b[b.item_name=='Steak Burrito'].choice_description.nunique()

b.dropna(inplace=True)

b[b.choice_description.str.contains('Black Beans')]

b[b.choice_description.str.contains('Black Beans')].item_name.value_counts()

b_chik=b[(b.item_price<10) & (b.item_name=='Chicken Bowl')]
b_chik

b[(b.item_name=='Chicken Bowl') & (b.item_price < 10)].sort_values(['item_price'])

df=pd.read_csv("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/imdb_1000.csv")
df

df[(df.content_rating=='PG-13')&(df.star_rating>=8)].sort_values(['duration'])

df[df.actors_list.str.contains('Leonardo DiCaprio')].sort_values(['star_rating','duration'])

df[df.actors_list.str.contains('Leonardo DiCaprio','Johnny Depp')].sort_values(['duration','star_rating'],ascending=[False,True])

f=pd.read_csv("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/ufo.csv")
f

f.dropna(subset=['City','Shape Reported'],how='all').shape

f.dropna(subset=['City','Shape Reported'],how='any').shape

f['Shape Reported'].value_counts()

f['Shape Reported'].isnull().sum()

n=pd.read_csv("https://raw.githubusercontent.com/nunnarilabs/ml/master/pandas/drinks.csv")
n

n.info()

n.beer_servings.mean()

n.beer_servings.min()

n.beer_servings.max()

n.describe()

n[n.continent=='Asia'].describe()

n[n.continent=='Asia'].beer_servings.agg(['mean','min','max'])

n.groupby('continent').beer_servings.max()

n.groupby('continent').beer_servings.agg(['mean','max','min'])

